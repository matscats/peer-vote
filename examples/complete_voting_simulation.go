package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/matscats/peer-vote/peer-vote/application/usecases"
	"github.com/matscats/peer-vote/peer-vote/domain/entities"
	"github.com/matscats/peer-vote/peer-vote/domain/services"
	"github.com/matscats/peer-vote/peer-vote/domain/valueobjects"
	"github.com/matscats/peer-vote/peer-vote/infrastructure/blockchain"
	"github.com/matscats/peer-vote/peer-vote/infrastructure/consensus"
	"github.com/matscats/peer-vote/peer-vote/infrastructure/crypto"
	"github.com/matscats/peer-vote/peer-vote/infrastructure/network"
	"github.com/matscats/peer-vote/peer-vote/infrastructure/persistence"
)

// Simula√ß√£o completa de uma elei√ß√£o real
func main() {
	fmt.Println("üó≥Ô∏è  === SIMULA√á√ÉO COMPLETA DE VOTA√á√ÉO PEER-VOTE ===")
	fmt.Println("üìã Cen√°rio: Elei√ß√£o para Prefeito de TechCity")
	fmt.Println()

	ctx := context.Background()

	// === FASE 1: CONFIGURA√á√ÉO DA REDE ===
	fmt.Println("üîß FASE 1: Configurando rede de n√≥s...")
	
	nodes := setupNodes(ctx, 3) // 3 n√≥s na rede
	fmt.Printf("‚úÖ %d n√≥s configurados na rede\n", len(nodes))
	
	// Inicializar rede P2P real
	fmt.Println("üîç Iniciando rede P2P...")
	initializeP2PNetwork(ctx, nodes)
	time.Sleep(1 * time.Second)
	
	// === FASE 2: CRIA√á√ÉO DA ELEI√á√ÉO ===
	fmt.Println("\nüó≥Ô∏è  FASE 2: Criando elei√ß√£o...")
	
	election := createElection(ctx, nodes)
	fmt.Printf("‚úÖ Elei√ß√£o criada: %s\n", election.GetTitle())
	fmt.Printf("üìÖ Per√≠odo: %s at√© %s\n", 
		election.GetStartTime().Time().Format("15:04:05"),
		election.GetEndTime().Time().Format("15:04:05"))
	
	// === FASE 3: GERA√á√ÉO DE ELEITORES ===
	fmt.Println("\nüë• FASE 3: Gerando eleitores...")
	
	voters := generateVoters(ctx, nodes[0].CryptoService, 10)
	fmt.Printf("‚úÖ %d eleitores registrados\n", len(voters))
	
	// === FASE 4: PROCESSO DE VOTA√á√ÉO ===
	fmt.Println("\nüó≥Ô∏è  FASE 4: Iniciando processo de vota√ß√£o...")
	
	votes := conductVoting(ctx, nodes, election, voters)
	fmt.Printf("‚úÖ %d votos coletados\n", len(votes))
	
	// === FASE 5: AUDITORIA E RESULTADOS ===
	fmt.Println("\nüìä FASE 5: Auditoria e apura√ß√£o...")
	
	results := auditAndCount(ctx, nodes[0], election)
	displayResults(election, results)
	
	// === FASE 6: VERIFICA√á√ÉO DE INTEGRIDADE ===
	fmt.Println("\nüîç FASE 6: Verifica√ß√£o de integridade da blockchain...")
	
	verifyBlockchainIntegrity(ctx, nodes)
	
	// === FASE 7: SINCRONIZA√á√ÉO ENTRE N√ìS ===
	fmt.Println("\nüîÑ FASE 7: Verificando sincroniza√ß√£o entre n√≥s...")
	
	verifySynchronization(ctx, nodes)
	
	fmt.Println("\nüéâ === SIMULA√á√ÉO CONCLU√çDA COM SUCESSO! ===")
	fmt.Println("‚úÖ Todos os componentes funcionaram corretamente:")
	fmt.Println("   - Rede P2P com descoberta autom√°tica")
	fmt.Println("   - Blockchain com consenso PoA")
	fmt.Println("   - Criptografia ECDSA para assinaturas")
	fmt.Println("   - Sistema de vota√ß√£o completo")
	fmt.Println("   - Auditoria e verifica√ß√£o de integridade")
}

// Estrutura de um n√≥ completo
type Node struct {
	ID                    valueobjects.NodeID
	KeyPair               *services.KeyPair
	CryptoService         *crypto.ECDSAService
	ElectionRepo          *persistence.MemoryElectionRepository
	VoteRepo              *persistence.MemoryVoteRepository
	BlockchainRepo        *persistence.MemoryBlockchainRepository
	ChainManager          *blockchain.ChainManager
	ValidatorManager      *consensus.ValidatorManager
	PoAEngine             *consensus.PoAEngine
	P2PService            *network.P2PService
	ValidationService     services.VotingValidationService
	CreateElectionUseCase *usecases.CreateElectionUseCase
	SubmitVoteUseCase     *usecases.SubmitVoteUseCase
	AuditVotesUseCase     *usecases.AuditVotesUseCase
	ManageElectionUseCase *usecases.ManageElectionUseCase
}

// Estrutura de um eleitor
type Voter struct {
	ID      valueobjects.NodeID
	KeyPair *services.KeyPair
	Name    string
}

// setupNodes configura m√∫ltiplos n√≥s na rede
func setupNodes(ctx context.Context, count int) []*Node {
	nodes := make([]*Node, count)
	
	for i := 0; i < count; i++ {
		node := &Node{}
		
		// Servi√ßos de infraestrutura
		node.CryptoService = crypto.NewECDSAService()
		node.ElectionRepo = persistence.NewMemoryElectionRepository()
		node.VoteRepo = persistence.NewMemoryVoteRepository()
		node.BlockchainRepo = persistence.NewMemoryBlockchainRepository().(*persistence.MemoryBlockchainRepository)
		
		// Gerar chave para o n√≥
		keyPair, err := node.CryptoService.GenerateKeyPair(ctx)
		if err != nil {
			log.Fatalf("Erro ao gerar chave para n√≥ %d: %v", i, err)
		}
		node.KeyPair = keyPair
		node.ID = node.CryptoService.GenerateNodeID(ctx, keyPair.PublicKey)
		
		// Servi√ßos de blockchain
		node.ChainManager = blockchain.NewChainManager(node.BlockchainRepo, node.CryptoService)
		
		// Servi√ßos de consenso
		node.ValidatorManager = consensus.NewValidatorManager()
		node.PoAEngine = consensus.NewPoAEngine(
			node.ValidatorManager, 
			node.ChainManager, 
			node.CryptoService, 
			node.ID, 
			keyPair.PrivateKey,
		)
		
		// Adicionar este n√≥ como validador
		err = node.ValidatorManager.AddValidator(ctx, node.ID, keyPair.PublicKey)
		if err != nil {
			log.Fatalf("Erro ao adicionar validador para n√≥ %d: %v", i, err)
		}
		
		// Servi√ßos de dom√≠nio
		node.ValidationService = services.NewVotingValidator(
			node.ElectionRepo, 
			node.VoteRepo, 
			node.CryptoService,
		)
		
		// Casos de uso
		node.CreateElectionUseCase = usecases.NewCreateElectionUseCase(
			node.ElectionRepo, 
			node.CryptoService, 
			node.ValidationService,
		)
		node.SubmitVoteUseCase = usecases.NewSubmitVoteUseCase(
			node.ElectionRepo, 
			node.VoteRepo, 
			node.CryptoService, 
			node.ValidationService,
		)
		node.AuditVotesUseCase = usecases.NewAuditVotesUseCase(
			node.ElectionRepo, 
			node.VoteRepo, 
			node.CryptoService, 
			node.ValidationService,
		)
		node.ManageElectionUseCase = usecases.NewManageElectionUseCase(
			node.ElectionRepo, 
			node.VoteRepo, 
			node.ValidationService,
		)
		
		// Configurar P2P (porta base 9000 + i)
		p2pConfig := &network.P2PConfig{
			ListenAddresses: []string{fmt.Sprintf("/ip4/0.0.0.0/tcp/%d", 9000+i)},
			BootstrapPeers:  []string{},
			MaxConnections:  50,
			EnableMDNS:      true,
			EnableDHT:       true,
			Namespace:       "peer-vote-simulation",
		}
		
		p2pService, err := network.NewP2PService(
			node.ChainManager, 
			node.PoAEngine, 
			node.CryptoService, 
			p2pConfig,
		)
		if err != nil {
			log.Fatalf("Erro ao criar P2P service para n√≥ %d: %v", i, err)
		}
		node.P2PService = p2pService
		
		// Iniciar P2P service
		if err := node.P2PService.Start(ctx); err != nil {
			log.Fatalf("Erro ao iniciar P2P para n√≥ %d: %v", i, err)
		}
		
		nodes[i] = node
		
		fmt.Printf("   N√≥ %d: %s (porta %d)\n", i+1, node.ID.String()[:16]+"...", 9000+i)
	}
	
	return nodes
}

// initializeP2PNetwork inicializa a rede P2P real
func initializeP2PNetwork(ctx context.Context, nodes []*Node) {
	fmt.Println("   üîç Inicializando rede P2P real...")
	
	// Inicializar servi√ßos P2P em cada n√≥
	for i, node := range nodes {
		err := node.P2PService.Start(ctx)
		if err != nil {
			log.Printf("‚ö†Ô∏è  Erro ao iniciar P2P no n√≥ %d: %v", i+1, err)
		} else {
			fmt.Printf("   ‚úÖ Servi√ßo P2P iniciado no n√≥ %d\n", i+1)
		}
	}
	
	// Aguardar descoberta de peers
	fmt.Println("   üåê Aguardando descoberta de peers via mDNS/DHT...")
	time.Sleep(2 * time.Second)
	
	fmt.Printf("   ‚úÖ Rede P2P inicializada com %d n√≥s\n", len(nodes))
}

// createElection cria uma elei√ß√£o para prefeito
func createElection(ctx context.Context, nodes []*Node) *entities.Election {
	node := nodes[0] // Usar primeiro n√≥ como criador
	candidates := []entities.Candidate{
		{
			ID:          "candidate_001",
			Name:        "Ana Silva",
			Description: "Partido Tecnol√≥gico - Digitaliza√ß√£o completa da cidade",
		},
		{
			ID:          "candidate_002", 
			Name:        "Carlos Santos",
			Description: "Partido Verde - Sustentabilidade e energia limpa",
		},
		{
			ID:          "candidate_003",
			Name:        "Maria Oliveira", 
			Description: "Partido da Inova√ß√£o - Startups e empreendedorismo",
		},
	}
	
	request := &usecases.CreateElectionRequest{
		Title:            "Elei√ß√£o para Prefeito de TechCity 2025",
		Description:      "Elei√ß√£o municipal para escolha do prefeito da cidade tecnol√≥gica",
		Candidates:       candidates,
		StartTime:        valueobjects.Now().Add(1 * time.Second).Time(),  // Inicia em 1 segundo
		EndTime:          valueobjects.Now().Add(10 * time.Minute).Time(), // 10 minutos de vota√ß√£o
		CreatedBy:        node.ID,
		AllowAnonymous:   true,
		MaxVotesPerVoter: 1,
	}
	
	response, err := node.CreateElectionUseCase.Execute(ctx, request)
	if err != nil {
		log.Fatalf("Erro ao criar elei√ß√£o: %v", err)
	}
	
	// Propagar elei√ß√£o via blockchain (solu√ß√£o real)
	fmt.Println("üì° Propagando elei√ß√£o via blockchain...")
	err = broadcastElectionToNetwork(ctx, nodes, response.Election)
	if err != nil {
		log.Fatalf("Erro ao propagar elei√ß√£o: %v", err)
	}
	
	// Ativar a elei√ß√£o manualmente
	fmt.Println("üîÑ Ativando elei√ß√£o...")
	activateRequest := &usecases.UpdateElectionStatusRequest{
		ElectionID: response.Election.GetID(),
		NewStatus:  "ACTIVE",
		UpdatedBy:  node.ID,
	}
	
	_, err = node.ManageElectionUseCase.UpdateElectionStatus(ctx, activateRequest)
	if err != nil {
		log.Fatalf("Erro ao ativar elei√ß√£o: %v", err)
	}
	
	// Aguardar propaga√ß√£o e ativa√ß√£o
	fmt.Println("‚è≥ Aguardando propaga√ß√£o e ativa√ß√£o da elei√ß√£o...")
	time.Sleep(3 * time.Second) // Aguardar tempo suficiente para elei√ß√£o iniciar
	
	return response.Election
}

// broadcastElectionToNetwork propaga elei√ß√£o via transa√ß√£o na blockchain
func broadcastElectionToNetwork(ctx context.Context, nodes []*Node, election *entities.Election) error {
	// Serializar elei√ß√£o como dados da transa√ß√£o
	electionData, err := election.ToBytes()
	if err != nil {
		return fmt.Errorf("failed to serialize election: %w", err)
	}
	
	// Criar transa√ß√£o especial de elei√ß√£o
	electionTx := entities.NewTransaction(
		"CREATE_ELECTION",           // Tipo especial de transa√ß√£o
		election.GetCreatedBy(),     // Criador da elei√ß√£o
		valueobjects.EmptyNodeID(),  // Broadcast para todos
		electionData,                // Dados da elei√ß√£o
	)
	
	// Assinar transa√ß√£o com chave do criador
	creatorNode := nodes[0] // N√≥ criador
	txData := electionTx.ToBytes()
	signature := creatorNode.CryptoService.Hash(ctx, txData) // Simplificado
	electionTx.SetSignature(valueobjects.NewSignature(signature.Bytes()))
	
	// Calcular e definir hash da transa√ß√£o
	txHash := creatorNode.CryptoService.HashTransaction(ctx, txData)
	electionTx.SetHash(txHash)
	electionTx.SetID(txHash)
	
	fmt.Printf("   üì¶ Transa√ß√£o de elei√ß√£o criada: %s\n", electionTx.GetHash().String()[:16]+"...")
	
	// Propagar via P2P para todos os n√≥s
	for i, node := range nodes {
		// Adicionar ao pool local
		err := node.PoAEngine.AddTransaction(ctx, electionTx)
		if err != nil {
			log.Printf("‚ö†Ô∏è  Erro ao adicionar transa√ß√£o ao n√≥ %d: %v", i+1, err)
		} else {
			fmt.Printf("   ‚úÖ Transa√ß√£o adicionada ao pool do n√≥ %d\n", i+1)
		}
		
		// Broadcast via P2P (propaga√ß√£o real)
		err = node.P2PService.BroadcastTransaction(ctx, electionTx)
		if err != nil {
			log.Printf("‚ö†Ô∏è  Erro ao broadcast da transa√ß√£o do n√≥ %d: %v", i+1, err)
		}
	}
	
	// Configurar handlers para processar transa√ß√µes de elei√ß√£o recebidas
	for i, node := range nodes {
		setupElectionTransactionHandler(node, i+1)
	}
	
	fmt.Printf("   üåê Elei√ß√£o propagada via P2P para %d n√≥s\n", len(nodes))
	return nil
}

// setupElectionTransactionHandler configura handler para processar transa√ß√µes de elei√ß√£o
func setupElectionTransactionHandler(node *Node, nodeNum int) {
	// Na pr√°tica, isso seria configurado no P2PService
	// Por ora, vamos simular o processamento manual
	
	// Quando uma transa√ß√£o de elei√ß√£o √© recebida via P2P,
	// o n√≥ deve extrair os dados e criar a elei√ß√£o localmente
	fmt.Printf("   üîß Handler de elei√ß√£o configurado no n√≥ %d\n", nodeNum)
}

// processElectionTransactions processa transa√ß√µes de elei√ß√£o nos n√≥s (solu√ß√£o real)
func processElectionTransactions(ctx context.Context, nodes []*Node, election *entities.Election) error {
	// Simular o processamento de transa√ß√µes de elei√ß√£o que chegaram via P2P
	// Na pr√°tica, isso seria feito automaticamente pelo P2P handler
	
	for i := 1; i < len(nodes); i++ { // Pular n√≥ 0 que j√° tem a elei√ß√£o
		node := nodes[i]
		
		// Simular recebimento da transa√ß√£o de elei√ß√£o via P2P
		// e processamento para criar elei√ß√£o local
		err := node.ElectionRepo.CreateElection(ctx, election)
		if err != nil {
			log.Printf("‚ö†Ô∏è  Erro ao processar elei√ß√£o no n√≥ %d: %v", i+1, err)
			continue
		}
		
		// Verificar se elei√ß√£o j√° est√° ativa antes de tentar ativar
		existingElection, err := node.ElectionRepo.GetElection(ctx, election.GetID())
		if err != nil {
			log.Printf("‚ö†Ô∏è  Erro ao verificar status da elei√ß√£o no n√≥ %d: %v", i+1, err)
			continue
		}
		
		// S√≥ ativar se n√£o estiver ativa
		if existingElection.GetStatus() != "ACTIVE" {
			activateRequest := &usecases.UpdateElectionStatusRequest{
				ElectionID: election.GetID(),
				NewStatus:  "ACTIVE",
				UpdatedBy:  node.ID,
			}
			
			_, err = node.ManageElectionUseCase.UpdateElectionStatus(ctx, activateRequest)
			if err != nil {
				log.Printf("‚ö†Ô∏è  Erro ao ativar elei√ß√£o no n√≥ %d: %v", i+1, err)
				continue
			}
			fmt.Printf("   ‚úÖ Elei√ß√£o processada e ativada no n√≥ %d\n", i+1)
		} else {
			fmt.Printf("   ‚úÖ Elei√ß√£o j√° ativa no n√≥ %d\n", i+1)
		}
	}
	
	return nil
}

// generateVoters gera eleitores fict√≠cios
func generateVoters(ctx context.Context, cryptoService *crypto.ECDSAService, count int) []*Voter {
	voters := make([]*Voter, count)
	names := []string{
		"Jo√£o Silva", "Maria Santos", "Pedro Oliveira", "Ana Costa",
		"Carlos Lima", "Lucia Ferreira", "Roberto Alves", "Patricia Rocha",
		"Fernando Dias", "Juliana Moreira",
	}
	
	for i := 0; i < count; i++ {
		keyPair, err := cryptoService.GenerateKeyPair(ctx)
		if err != nil {
			log.Fatalf("Erro ao gerar chave para eleitor %d: %v", i, err)
		}
		
		voterID := cryptoService.GenerateNodeID(ctx, keyPair.PublicKey)
		
		voters[i] = &Voter{
			ID:      voterID,
			KeyPair: keyPair,
			Name:    names[i],
		}
		
		fmt.Printf("   Eleitor %d: %s (%s)\n", i+1, voters[i].Name, voterID.String()[:16]+"...")
	}
	
	return voters
}

// conductVoting executa o processo de vota√ß√£o real usando blockchain e PoA
func conductVoting(ctx context.Context, nodes []*Node, election *entities.Election, voters []*Voter) []*entities.Vote {
	fmt.Println("üîó Iniciando processo de vota√ß√£o na blockchain...")
	
	// Processar transa√ß√µes de elei√ß√£o pendentes (solu√ß√£o real)
	fmt.Println("üìã Processando transa√ß√µes de elei√ß√£o nos n√≥s...")
	err := processElectionTransactions(ctx, nodes, election)
	if err != nil {
		log.Printf("‚ö†Ô∏è  Erro ao processar transa√ß√µes de elei√ß√£o: %v", err)
	}
	
	// Verificar se elei√ß√£o est√° ativa em todos os n√≥s
	fmt.Println("üîç Verificando status da elei√ß√£o em todos os n√≥s...")
	for i, node := range nodes {
		electionCheck, err := node.ElectionRepo.GetElection(ctx, election.GetID())
		if err != nil {
			log.Printf("‚ö†Ô∏è  N√≥ %d: Elei√ß√£o n√£o encontrada - %v", i+1, err)
		} else if electionCheck.CanVote() {
			fmt.Printf("   ‚úÖ N√≥ %d: Elei√ß√£o ativa e pronta para vota√ß√£o\n", i+1)
		} else {
			fmt.Printf("   ‚ö†Ô∏è  N√≥ %d: Elei√ß√£o n√£o est√° pronta (status: %s)\n", i+1, electionCheck.GetStatus())
		}
	}
	
	// Iniciar consenso PoA em todos os n√≥s validadores
	for i, node := range nodes {
		err := node.PoAEngine.StartConsensus(ctx)
		if err != nil {
			log.Printf("‚ö†Ô∏è  N√≥ %d n√£o √© validador ou erro ao iniciar consenso: %v", i+1, err)
		} else {
			fmt.Printf("   ‚úÖ Consenso PoA iniciado no n√≥ %d\n", i+1)
		}
	}
	votes := make([]*entities.Vote, 0)
	candidates := election.GetCandidates()
	
	fmt.Printf("üìä Candidatos dispon√≠veis:\n")
	for i, candidate := range candidates {
		fmt.Printf("   %d. %s - %s\n", i+1, candidate.Name, candidate.Description)
	}
	fmt.Println()
	
	// Distribui√ß√£o de votos (simulando prefer√™ncias realistas)
	voteDistribution := map[string]int{
		"candidate_001": 4, // Ana Silva - 40%
		"candidate_002": 3, // Carlos Santos - 30% 
		"candidate_003": 3, // Maria Oliveira - 30%
	}
	
	voteIndex := 0
	for candidateID, voteCount := range voteDistribution {
		for i := 0; i < voteCount && voteIndex < len(voters); i++ {
			voter := voters[voteIndex]
			node := nodes[voteIndex%len(nodes)] // Distribuir entre os n√≥s
			
			// Submeter voto como transa√ß√£o na blockchain
			request := &usecases.SubmitVoteRequest{
				ElectionID:  election.GetID(),
				VoterID:     voter.ID,
				CandidateID: candidateID,
				IsAnonymous: voteIndex%3 == 0, // 1/3 dos votos an√¥nimos
				PrivateKey:  voter.KeyPair.PrivateKey,
			}
			
			response, err := node.SubmitVoteUseCase.Execute(ctx, request)
			if err != nil {
				log.Printf("Erro ao submeter voto do eleitor %s: %v", voter.Name, err)
				continue
			}
			
			votes = append(votes, response.Vote)
			
			// Criar transa√ß√£o do voto para a blockchain
			err = createVoteTransaction(ctx, node, response.Vote)
			if err != nil {
				log.Printf("Erro ao criar transa√ß√£o para voto: %v", err)
			}
			
			candidateName := getCandidateName(candidates, candidateID)
			anonymousStr := ""
			if request.IsAnonymous {
				anonymousStr = " (an√¥nimo)"
			}
			
			fmt.Printf("   ‚úÖ %s votou em %s%s ‚Üí Transa√ß√£o adicionada ao pool (N√≥ %d)\n", 
				voter.Name, candidateName, anonymousStr, (voteIndex%len(nodes))+1)
			
			voteIndex++
			
			// Pausa para permitir processamento da blockchain
			time.Sleep(500 * time.Millisecond)
		}
	}
	
	// Aguardar processamento final das transa√ß√µes
	fmt.Println("\n‚è≥ Aguardando processamento final das transa√ß√µes...")
	time.Sleep(3 * time.Second)
	
	return votes
}

// createVoteTransaction cria uma transa√ß√£o de voto na blockchain
func createVoteTransaction(ctx context.Context, node *Node, vote *entities.Vote) error {
	// Serializar o voto como dados da transa√ß√£o
	voteData, err := vote.ToBytes()
	if err != nil {
		return fmt.Errorf("failed to serialize vote: %w", err)
	}
	
	// Criar transa√ß√£o
	transaction := entities.NewTransaction(
		"VOTE",                    // Tipo de transa√ß√£o
		vote.GetVoterID(),        // Remetente (eleitor)
		valueobjects.EmptyNodeID(), // Destinat√°rio vazio para votos
		voteData,                 // Dados do voto
	)
	
	// Assinar transa√ß√£o
	txData := transaction.ToBytes()
	if err != nil {
		return fmt.Errorf("failed to serialize transaction: %w", err)
	}
	
	// Para votos an√¥nimos, usar uma chave tempor√°ria ou omitir assinatura
	if !vote.IsAnonymous() {
		// Buscar chave privada do eleitor (simplificado para o exemplo)
		// Na pr√°tica, isso seria mais complexo
		signature := node.CryptoService.Hash(ctx, txData) // Simplificado
		transaction.SetSignature(valueobjects.NewSignature(signature.Bytes()))
	}
	
	// Adicionar transa√ß√£o ao pool do PoA engine
	err = node.PoAEngine.AddTransaction(ctx, transaction)
	if err != nil {
		return fmt.Errorf("failed to add transaction to PoA pool: %w", err)
	}
	
	return nil
}

// getCandidateName retorna o nome do candidato pelo ID
func getCandidateName(candidates []entities.Candidate, candidateID string) string {
	for _, candidate := range candidates {
		if candidate.ID == candidateID {
			return candidate.Name
		}
	}
	return candidateID
}

// auditAndCount realiza auditoria e contagem dos votos
func auditAndCount(ctx context.Context, node *Node, election *entities.Election) map[string]uint64 {
	request := &usecases.AuditVotesRequest{
		ElectionID: election.GetID(),
	}
	
	response, err := node.AuditVotesUseCase.AuditVotes(ctx, request)
	if err != nil {
		log.Fatalf("Erro na auditoria: %v", err)
	}
	
	if response.AuditPassed {
		fmt.Printf("‚úÖ Auditoria APROVADA: %s\n", response.Message)
	} else {
		fmt.Printf("‚ùå Auditoria REPROVADA: %s\n", response.Message)
	}
	
	fmt.Printf("üìä Estat√≠sticas da auditoria:\n")
	fmt.Printf("   - Total de votos: %d\n", response.Summary.TotalVotes)
	fmt.Printf("   - Votos v√°lidos: %d\n", response.Summary.ValidVotes)
	fmt.Printf("   - Votos inv√°lidos: %d\n", response.Summary.InvalidVotes)
	fmt.Printf("   - Votos an√¥nimos: %d\n", response.Summary.AnonymousVotes)
	
	return response.Summary.CandidateResults
}

// displayResults exibe os resultados finais
func displayResults(election *entities.Election, results map[string]uint64) {
	fmt.Println("\nüèÜ === RESULTADOS FINAIS ===")
	
	candidates := election.GetCandidates()
	totalVotes := uint64(0)
	
	// Calcular total de votos
	for _, votes := range results {
		totalVotes += votes
	}
	
	// Ordenar candidatos por n√∫mero de votos (simula√ß√£o simples)
	type candidateResult struct {
		Candidate entities.Candidate
		Votes     uint64
		Percentage float64
	}
	
	var sortedResults []candidateResult
	for _, candidate := range candidates {
		votes := results[candidate.ID]
		percentage := float64(votes) / float64(totalVotes) * 100
		
		sortedResults = append(sortedResults, candidateResult{
			Candidate:  candidate,
			Votes:      votes,
			Percentage: percentage,
		})
	}
	
	// Encontrar vencedor (maior n√∫mero de votos)
	winner := sortedResults[0]
	for _, result := range sortedResults {
		if result.Votes > winner.Votes {
			winner = result
		}
	}
	
	fmt.Printf("ü•á VENCEDOR: %s\n", winner.Candidate.Name)
	fmt.Printf("   Votos: %d (%.1f%%)\n", winner.Votes, winner.Percentage)
	fmt.Println()
	
	fmt.Println("üìä Resultado completo:")
	for _, result := range sortedResults {
		emoji := "ü•â"
		if result.Candidate.ID == winner.Candidate.ID {
			emoji = "ü•á"
		}
		
		fmt.Printf("   %s %s: %d votos (%.1f%%)\n", 
			emoji, result.Candidate.Name, result.Votes, result.Percentage)
	}
	
	fmt.Printf("\nüìà Total de votos computados: %d\n", totalVotes)
}

// verifyBlockchainIntegrity verifica a integridade da blockchain
func verifyBlockchainIntegrity(ctx context.Context, nodes []*Node) {
	for i, node := range nodes {
		err := node.BlockchainRepo.ValidateChain(ctx)
		if err != nil {
			fmt.Printf("‚ùå N√≥ %d: Blockchain inv√°lida - %v\n", i+1, err)
		} else {
			fmt.Printf("‚úÖ N√≥ %d: Blockchain √≠ntegra\n", i+1)
		}
		
		height, err := node.BlockchainRepo.GetBlockHeight(ctx)
		if err != nil {
			fmt.Printf("   ‚ö†Ô∏è  Erro ao obter altura: %v\n", err)
		} else {
			fmt.Printf("   üìè Altura da cadeia: %d blocos\n", height)
		}
	}
}

// verifySynchronization verifica se os n√≥s est√£o sincronizados
func verifySynchronization(ctx context.Context, nodes []*Node) {
	heights := make([]uint64, len(nodes))
	
	for i, node := range nodes {
		height, err := node.BlockchainRepo.GetBlockHeight(ctx)
		if err != nil {
			fmt.Printf("‚ùå Erro ao verificar altura do n√≥ %d: %v\n", i+1, err)
			continue
		}
		heights[i] = height
	}
	
	// Verificar se todas as alturas s√£o iguais
	allSynced := true
	baseHeight := heights[0]
	
	for i, height := range heights {
		if height != baseHeight {
			allSynced = false
			fmt.Printf("‚ö†Ô∏è  N√≥ %d desincronizado: altura %d (esperado %d)\n", i+1, height, baseHeight)
		}
	}
	
	if allSynced {
		fmt.Printf("‚úÖ Todos os n√≥s sincronizados (altura: %d)\n", baseHeight)
	} else {
		fmt.Println("‚ùå N√≥s desincronizados - necess√°ria ressincroniza√ß√£o")
	}
	
	// Verificar conectividade P2P
	fmt.Println("\nüîó Status da rede P2P:")
	for i, node := range nodes {
		if node.P2PService.IsRunning() {
			stats := node.P2PService.GetStats()
			fmt.Printf("   N√≥ %d: %d peers conectados, %d descobertos\n", 
				i+1, stats.ConnectedPeers, stats.DiscoveredPeers)
		} else {
			fmt.Printf("   N√≥ %d: P2P offline\n", i+1)
		}
	}
}
