package cli

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
)

var (
	// Flags globais
	configFile string
	verbose    bool
	nodeID     string
)

// rootCmd representa o comando base quando chamado sem subcomandos
var rootCmd = &cobra.Command{
	Use:   "peer-vote",
	Short: "Sistema de vota√ß√£o descentralizado baseado em blockchain",
	Long: `Peer-Vote √© um sistema de vota√ß√£o descentralizado que utiliza blockchain 
com algoritmo de consenso Proof of Authority (PoA) e comunica√ß√£o P2P via libp2p.

Cada n√≥ da rede pode atuar como eleitor, garantindo transpar√™ncia e 
descentraliza√ß√£o no processo eleitoral.`,
	Version: "1.0.0",
}

// Execute adiciona todos os comandos filhos ao comando raiz e define flags apropriadamente.
// √â chamado pelo main.main(). S√≥ precisa acontecer uma vez para o rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)

	// Flags globais
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "arquivo de configura√ß√£o (padr√£o: $HOME/.peer-vote.yaml)")
	rootCmd.PersistentFlags().BoolVarP(&verbose, "verbose", "v", false, "sa√≠da verbosa")
	rootCmd.PersistentFlags().StringVar(&nodeID, "node-id", "", "ID do n√≥ (gerado automaticamente se n√£o especificado)")

	// Flags locais
	rootCmd.Flags().BoolP("toggle", "t", false, "Mensagem de ajuda para toggle")
}

// initConfig l√™ o arquivo de configura√ß√£o e vari√°veis de ambiente se definidas.
func initConfig() {
	if configFile != "" {
		// Usar arquivo de configura√ß√£o especificado pela flag
		fmt.Printf("üìÑ Usando arquivo de configura√ß√£o: %s\n", configFile)
	} else {
		// Procurar por arquivo de configura√ß√£o no diret√≥rio home
		home, err := os.UserHomeDir()
		cobra.CheckErr(err)

		configPath := home + "/.peer-vote.yaml"
		if _, err := os.Stat(configPath); err == nil {
			configFile = configPath
			fmt.Printf("üìÑ Arquivo de configura√ß√£o encontrado: %s\n", configFile)
		}
	}

	if verbose {
		fmt.Println("üîç Modo verboso ativado")
	}
}
